name: Update Ranked Decks JSON

on:
  schedule:
    # Run every 24 hours at midnight UTC
    - cron: "0 0 * * *"
  workflow_dispatch: # Allow manual triggering

jobs:
  update-json:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Fetch data from API with pagination
      - name: Fetch data from API
        id: fetch_data
        run: |
          total_data="[]"
          after_cursor="null"
          total_count=0
          limit=500

          while [ $total_count -lt $limit ]; do
            response=$(curl -s -X POST -H "Content-Type: application/json" \
              -d '{"query": "query ($after: String) { commanders(first: 100, sortBy: POPULARITY, minEntries: 0, timePeriod: THREE_MONTHS, after: $after) { edges { cursor node { name stats(filters: { timePeriod: THREE_MONTHS, minSize: 16 }) { conversionRate metaShare } } } pageInfo { endCursor hasNextPage } } }", "variables": {"after": '"$after_cursor"'}}' \
              https://edhtop16.com/api/graphql)

            # Extract edges
            edges=$(echo "$response" | jq '.data.commanders.edges')
            edge_count=$(echo "$edges" | jq 'length')
            total_count=$((total_count + edge_count))

            # Check if total count exceeds the limit
            if [ $total_count -ge $limit ]; then
              # Trim to the first X entries
              remaining_count=$((limit - (total_count - edge_count)))
              edges=$(echo "$edges" | jq ".[0:$remaining_count]")
              total_count=$limit
            fi

            # Append edges to total_data
            total_data=$(echo "$total_data $edges" | jq -s 'add')

            # Break if the limit is reached
            if [ $total_count -ge $limit ]; then
              break
            fi

            # Update after_cursor
            after_cursor=$(echo "$response" | jq '.data.commanders.pageInfo.endCursor')

            # Break if no more pages are available
            hasNextPage=$(echo "$response" | jq '.data.commanders.pageInfo.hasNextPage')
            if [ "$hasNextPage" != "true" ]; then
              break
            fi
          done

          # Parse and save the data
          echo "$total_data" | jq 'map({name: .node.name, conversionRate: .node.stats.conversionRate, metaShare: .node.stats.metaShare})' > parsed-data.json

      # Step 3: Update the JSON file
      - name: Update JSON file
        run: |
          echo "{\"lastUpdated\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\", \"data\": $(cat parsed-data.json)}" > ranked-decks.json
        shell: bash

      # Step 4: Commit and push changes
      - name: Commit changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add ranked-decks.json
          git commit -m "Update ranked-decks.json"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
